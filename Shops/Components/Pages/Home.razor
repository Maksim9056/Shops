@page "/"
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using ShopClassLibrary.ModelShop
@rendermode InteractiveServer
@inject HttpClient client
@inject NavigationManager NavigationManager
<PageTitle>Home</PageTitle>
@inject ProtectedLocalStorage ProtectedLocalStore
@inject IJSRuntime JSRuntime
@inject IConfiguration Configuration
@* <input type="email" @bind="Searh_input" />
 *@@* <div>
    <p>Почта</p>
    <input type="email" @bind="" />
</div>

<div>
    <p>Пароль</p>
    <input type="password" @bind="" />
</div>

<button @onclick=Log>Вход</button>
 *@
@if (Categories != null)
{
    @foreach (var category in categoryList)
    {
        <li>@category.Name_Category</li>
        <img src="data:image/png;base64,@Convert.ToBase64String(category.Image_Category)" alt="Category" @* @onclick ="" *@>

    }

{ }
}


@code
{

    public IAsyncEnumerable<Category> Categories  ;
    private string Searh_input;
    private List<Category> categoryList = new List<Category>();

    private string Store_Products;
    private Dictionary<string, string> Urls = new Dictionary<string, string>();
    public Product[] Products ;

    protected override async Task OnInitializedAsync()
    {
        try
        {


            // Загружаем словарь URL-адресов из appsettings.json
            Urls = Configuration.GetSection("Urls").Get<Dictionary<string, string>>() ?? new Dictionary<string, string>();

            // Получаем URL для "Google"
            Urls.TryGetValue("Store_Category", out Store_Products);


            await Registration_page();
        }
        catch(Exception)
        {
            
        }
    }


    // private async Task Log()
    // {

    // }

    private async Task Registration_page()
    {
        try
        {

            client.BaseAddress =new  Uri (Store_Products);
            var prod = await client.GetFromJsonAsync<IAsyncEnumerable<Category>>(Store_Products + "/CategoryControler");
            // Проверяем, инициализирован ли Categories
            if (Categories != null)
            {
                // Асинхронно перебираем и добавляем категории в список
                await foreach (var category in Categories)
                {
                    categoryList.Add(category);
                    // Можно обновлять UI после добавления каждого элемента
                    // StateHasChanged();
                }
            }
            else
            {
                // Обработка случая, когда Categories не инициализирован
                // Например, можно вызвать метод для его инициализации
            }
        }
        catch(Exception)
        {
            
        }

    }


}