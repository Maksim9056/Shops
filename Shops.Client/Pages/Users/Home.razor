@page "/"
@using ShopClassLibrary.ModelShop
@using System.Net.Http.Headers
@rendermode InteractiveServer
@inject HttpClient client
@inject NavigationManager NavigationManager
@inject IConfiguration Configuration
@inject UrlService UrlService
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject IJSRuntime JSRuntime
@inject IConfiguration Configuration

@* <input @bind="searchInput" placeholder="Search for products..." />
<button @onclick="PerformSearch">Search</button> *@
<input @bind="searchInput" placeholder="Искать товары..." />
<select @bind="selectedCategory">
    <option value="">Все категории</option>
    @foreach (var category in categoryList)
    {
        <option value="@category.Name_Category">@category.Name_Category</option>
    }
</select>
<input @bind="minPrice" type="number" placeholder="Мин. цена" />
<input @bind="maxPrice" type="number" placeholder="Макс. цена" />

<button @onclick="PerformSearch">Искать</button>
@if (categoryList.Count() > 0)
{
    <div class="category-grid">
        @foreach (var category in categoryList)
        {
            <div class="category-card">
                <h3 class="category-name">@category.Name_Category</h3>
                @if (category.Image_Category != null)
                {
                    <a @onclick="() => NavigateToCategoryPage(category.Id)">
                        <img src="data:image/png;base64,@Convert.ToBase64String(category.Image_Category.OriginalImageData)" alt="@category.Name_Category" class="category-image" />
                    </a>
                }
            </div>
        }
    </div>
}

<style>
    /* Сетка для категорий */
    .category-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
        gap: 20px;
        margin: 20px;
    }

    /* Карточка для категории */
    .category-card {
        border: 1px solid #ddd;
        border-radius: 10px;
        padding: 15px;
        transition: transform 0.3s ease-in-out;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        text-align: center;
        background-color: #fff;
        cursor: pointer;
    }

        .category-card:hover {
            transform: scale(1.05);
        }

    /* Название категории */
    .category-name {
        font-size: 20px;
        font-weight: bold;
        margin-bottom: 10px;
    }

    /* Изображение категории */
    .category-image {
        max-width: 100%;
        height: auto;
        border-radius: 10px;
        transition: opacity 0.3s ease;
    }

        .category-image:hover {
            opacity: 0.8;
        }
</style>

@code
{  private string searchInput;
    private string searchQuery;
    private string selectedCategory;
    private long minPrice;
    private long maxPrice;
    private void PerformSearch()
    {
        var url = $"/search?query={searchInput}&category={selectedCategory}&minPrice={minPrice}&maxPrice={maxPrice}";
        NavigationManager.NavigateTo(url);
    }

    private string Searh_input;
    private List<Category> categoryList = new List<Category>();

    private string Store_Products;
    private Dictionary<string, string> Urls = new Dictionary<string, string>();
    public Product[] Products;
    public string Url_Image;
    private bool _isInitialized;
    private string Store_CategoryUrl_Service;
    private string jwt_token { get; set; }
    // Метод для навигации на страницу с выбранной категорией
    private void NavigateToCategoryPage(long categoryId)
    {
        try
        {
            NavigationManager.NavigateTo($"/category/{categoryId}");
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        try
        {


            if (firstRender)
            {
                _isInitialized = true;
                jwt_token = await localStorage.GetItemAsync<string>("jwt_token");
                Console.WriteLine("JWT Token: " + jwt_token);
                await localStorage.RemoveItemAsync("Store_CategoryUrl");
                var Store_CategoryUrl = await localStorage.GetItemAsync<string>("Store_CategoryUrl");
                var GetUserStore_Products_ServiceUrl = await localStorage.GetItemAsync<string>("Store_CategoryUrl");
                var UserServiceUrl = await localStorage.GetItemAsync<string>("UserServiceUrl");

                if (GetUserStore_Products_ServiceUrl == null || Store_CategoryUrl == null)
                {
                    Store_CategoryUrl_Service = UrlService.GetUserStore_Category_ServiceUrl();
                    Store_Products = UrlService.GetUserStore_Products_ServiceUrl();

                    await localStorage.SetItemAsync("Store_CategoryUrl", Store_CategoryUrl_Service);
                    await localStorage.SetItemAsync("GetUserStore_Products_ServiceUrl", GetUserStore_Products_ServiceUrl);

                    // Данные отсутствуют - записываем их в LocalStorage
                    // await localStorage.SetItemAsync("UserServiceUrl", UserService);
                    Console.WriteLine("Данные записаны в LocalStorage");
                }
                else
                {

                    Store_CategoryUrl_Service = Store_CategoryUrl;
                    Store_Products = Store_CategoryUrl;
                    // Данные уже существуют - используем их
                    Console.WriteLine($"Значение из LocalStorage:{Store_CategoryUrl}");
                }
                // client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", jwt_token);
                // var createuser = await client.GetAsync(UserServiceUrl + "/UserConroller/check-similar?TEST=1");

                // // var createuser = await client.GetAsync(UserServiceUrl + "/UserConroller/check-similar");
                // if (createuser.IsSuccessStatusCode)
                // {
                //     var content = await createuser.Content.ReadAsStringAsync();
                //     Console.WriteLine("Response: " + content);
                // }
                // else
                // {
                //     Console.WriteLine("Authorization failed: " + createuser.StatusCode);
                // }
                // var user = await createuser.RequestMessage.Content.ReadAsStringAsync();
                // Console.WriteLine(user);
                // Теперь можно безопасно вызывать JS interop
                // await JSRuntime.InvokeVoidAsync("console.log", "Component fully rendered!");
                await Registration_page();

            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    // protected override async Task OnInitializedAsync()
    // {
    //     try
    //     {

    //         GetUserStore_Category_ServiceUrl.
    //         // Загружаем словарь URL-адресов из appsettings.json
    //         Urls = Configuration.GetSection("Urls").Get<Dictionary<string, string>>() ?? new Dictionary<string, string>();

    //         // Получаем URL для "Google"
    //         Urls.TryGetValue("Store_Category", out Store_Products);


    //         await Registration_page();
    //     }
    //     catch (Exception)
    //     {

    //     }
    // }


    // private async Task Log()
    // {

    // }

    private async Task Registration_page()
    {
        try
        {

            // client.BaseAddress = new Uri(Store_Products);
            // Categories = await client.GetFromJsonAsync<IAsyncEnumerable<Category>>(Store_Products + "/CategoryControler");
            // var categoryList = await client.GetFromJsonAsync<List<Category>>(Store_Products + "/CategoryControler/all");

            // var tasks = categoryList.Select(async category =>
            // {
            //     var image = await client.GetFromJsonAsync<byte[]>(Store_Products + $"/CategoryControler/fille{category.Id}");
            //     if (image != null)
            //     {
            //         category.Image_Category = image;
            //     }
            // });

            // await Task.WhenAll(tasks);
            Url_Image = UrlService.GetStoreImage_Products_ServiceUrl();
            //Работает
            client.DefaultRequestHeaders.Authorization = null;
            categoryList = await client.GetFromJsonAsync<List<ShopClassLibrary.ModelShop.Category>>(Store_CategoryUrl_Service + "/CategoryControler/all");
            for (int i = 0; i < categoryList.Count; i++)
            {
                var image = await client.GetFromJsonAsync<ImageCopy>(Url_Image + $"/Image/{categoryList[i].Image_Category.Id}");
                if (image != null)
                {
                    categoryList[i].Image_Category = new Image { Id = categoryList[i].Image_Category.Id, OriginalImageData = image.CopyImageData };

                }

            }
            // categoryList = await client.GetFromJsonAsync<List<Category>>(Store_Products + "/CategoryControler/all");

            // for (int i=0; i< categoryList.Count; i++)
            // {
            //     var image = await client.GetFromJsonAsync<byte[]>(Store_Products + $"/CategoryControler/fille{categoryList[i].Id}");
            //     if (image != null)
            //     {
            //         categoryList[i].Image_Category = image;

            //     }

            // }

            // foreach (var Category in categoryList)
            // {
            //     await client.GetFromJsonAsync<List<Category>>(Store_Products + "/CategoryControler/all");

            // }
            // Проверяем, инициализирован ли Categories
            // if (Categories != null)
            // {
            //     // Асинхронно перебираем и добавляем категории в список
            //     await foreach (var category in Categories)
            //     {
            //         categoryList.Add(category);
            //         // Можно обновлять UI после добавления каждого элемента
            //         // StateHasChanged();
            //     }
            // }
            // else
            // {
            //     // Обработка случая, когда Categories не инициализирован
            //     // Например, можно вызвать метод для его инициализации
            // }
            StateHasChanged();

        }
        catch (Exception)
        {

        }

    }


}