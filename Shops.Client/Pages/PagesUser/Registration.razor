@page "/registration"
@using ShopClassLibrary.ModelShop
@* @rendermode InteractiveWebAssembly
 *@
@rendermode InteractiveAuto

@inject HttpClient client
@inject NavigationManager NavigationManager
@* <PageTitle>Home</PageTitle>
 *@

@inject IJSRuntime JSRuntime
@inject IConfiguration Configuration
@inject UrlService UrlService
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<h3>Registration</h3>
@* <h1>UserService</h1> *@
@* @inject ILogger Logger
 *@
<div>
    <label>Имя</label>
    <input type="text" @bind="User.UserName ">
</div>
<div>
    <label>Фамилия</label>
    <input type="text" @bind="User.Surname">
</div>
<div>
    <label>Возраст</label>
    <input type="number" @bind="User.Year">
</div>
<div>
    <label>Пароль</label>
    <input type="password" @bind="User.Password">
</div>

<div>
    <label>Почта</label>
    <input type="email" @bind="User.Email">
</div>

<div>
    <label>Телефон</label>
    <input type="tel" @bind="User.PhoneNumber">
</div>
<InputFile OnChange="@HandleFileUpload" />
@* @if (bytes != null)
{
    <img src="data:image/png;base64,@Convert.ToBase64String(bytes)">

}
 *@

<button class="btn btn-primary" @onclick="SubmitForm">Зарегистрироваться</button>



@code {
    public User User = new User();
    private string UserService;
    public byte[] bytes;
    private bool _isInitialized;
    private string StatusService;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _isInitialized = true;
            var storedUsername = await localStorage.GetItemAsync<string>("UserServiceUrl");
            var storedStatus = await localStorage.GetItemAsync<string>("StatusServiceUrl");

            if (storedUsername == null || storedStatus == null)
            {
                UserService = UrlService.GetUserServiceUrl();
                StatusService = UrlService.GetStatusServiceUrl();
                await localStorage.SetItemAsync("StatusServiceUrl", StatusService);

                // Данные отсутствуют - записываем их в LocalStorage
                await localStorage.SetItemAsync("UserServiceUrl", UserService);
                Console.WriteLine("Данные записаны в LocalStorage");
            }
            else
            {
                UserService = storedUsername;

                StatusService = storedStatus;
                // Данные уже существуют - используем их
                Console.WriteLine($"Значение из LocalStorage: {storedUsername} ,{storedStatus}");
            }
            // Теперь можно безопасно вызывать JS interop
            // await JSRuntime.InvokeVoidAsync("console.log", "Component fully rendered!");
        }
    }

    // protected override async Task OnInitializedAsync()
    // {
    //     try
    //     {
    //         // Проверяем, есть ли данные в LocalStorage

    //          // Сохранение данных

    //         // Извлечение данных
    //         // // Загружаем словарь URL-адресов из appsettings.json
    //         // var keyValuePairs = Configuration.GetSection("Urls").Get<Dictionary<string, string>>() ?? new Dictionary<string, string>();
    //         // foreach (var url in keyValuePairs)
    //         // {
    //         //     Urls.Add(url.Key, url.Value);

    //         // }
    //         // // Получаем URL для "Google"
    //         // Urls.TryGetValue("UserService", out UserService);
    //         StateHasChanged();

    //     }
    //     catch(Exception)
    //     {

    //     }
    // }

    private async Task SubmitForm()
    {
        try
        {
            // StatusConroller / usercreate
            User.User_Image = bytes;
            User.IsBlocked = false;
            User.CreatedDate = DateTime.UtcNow;

            var status = await client.GetFromJsonAsync<Status>(StatusService + "/StatusConroller/usercreate");

            // Status status = new Status() { Id =0,StatusName="",Description=""};
            User.Status = status;

            User.Orders = new List<Order>();
            User.Id = 0;
            User.PasswordHash = "";

            // client.BaseAddress = new Uri(UserService );
            var createuser = await client.PostAsJsonAsync(UserService + "/UserConroller", User);
            var user =   await  createuser.RequestMessage.Content.ReadAsStringAsync();
            Console.WriteLine(user);
            
            NavigationManager.NavigateTo("/");

        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);

        }
    }
    // private List<IBrowserFile> loadedFiles = new();
    private long maxFileSize = 1024 * 15;
    private int maxAllowedFiles = 3;
    private bool isLoading;

    private async Task HandleFileUpload(InputFileChangeEventArgs e)
    {
        try
        {
            // isLoading = true;
            // loadedFiles.Clear();

            // foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
            // {
                
                    // loadedFiles.Add(file);

                using (MemoryStream ms = new MemoryStream())
                {
                    //Открыть один раз  дать значение
                    var mss = e.File.OpenReadStream();
                // Копируем данные в память асинхронно
                await mss.CopyToAsync(ms);
                bytes = ms.ToArray();

                // Выводим размер данных в консоль для проверки
                Console.WriteLine($"Размер массива байт: {bytes.Length} байт");
                }

            // Проверка, если массив пустой
            if (bytes == null || bytes.Length == 0)
            {
                Console.WriteLine("Ошибка: массив байтов пуст.");
            }
            else
            {
                Console.WriteLine("Файл успешно загружен.");
            }

                    // Logger.LogError($"File: {e.File.Name} Error: {ex.Message}",
                    //     file.Name, ex.Message);
                
            // }

            // isLoading = false;
            // await using FileStream fs = new(path, FileMode.Create);
            // await e.FilebrowserFile.OpenReadStream().CopyToAsync(fs);
            // using (MemoryStream ms = new MemoryStream())
            // {
            //     //Открыть один раз  дать значение
            //     var mss = e.File.OpenReadStream();  
            //     // Копируем в поток
            //     await mss.CopyToAsync(ms);
            //     //Преобразуем в данные В МАССИВ BYTE[]
            //     bytes = ms.ToArray();
            // }
        }
        catch(Exception ex  )
        {
                        Console.WriteLine(ex.Message);

        }
    }
}
